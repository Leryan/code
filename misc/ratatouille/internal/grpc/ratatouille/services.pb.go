// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package ratatouille

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Mother struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mother) Reset()         { *m = Mother{} }
func (m *Mother) String() string { return proto.CompactTextString(m) }
func (*Mother) ProtoMessage()    {}
func (*Mother) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{0}
}

func (m *Mother) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mother.Unmarshal(m, b)
}
func (m *Mother) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mother.Marshal(b, m, deterministic)
}
func (m *Mother) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mother.Merge(m, src)
}
func (m *Mother) XXX_Size() int {
	return xxx_messageInfo_Mother.Size(m)
}
func (m *Mother) XXX_DiscardUnknown() {
	xxx_messageInfo_Mother.DiscardUnknown(m)
}

var xxx_messageInfo_Mother proto.InternalMessageInfo

func (m *Mother) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Son struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Son) Reset()         { *m = Son{} }
func (m *Son) String() string { return proto.CompactTextString(m) }
func (*Son) ProtoMessage()    {}
func (*Son) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{1}
}

func (m *Son) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Son.Unmarshal(m, b)
}
func (m *Son) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Son.Marshal(b, m, deterministic)
}
func (m *Son) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Son.Merge(m, src)
}
func (m *Son) XXX_Size() int {
	return xxx_messageInfo_Son.Size(m)
}
func (m *Son) XXX_DiscardUnknown() {
	xxx_messageInfo_Son.DiscardUnknown(m)
}

var xxx_messageInfo_Son proto.InternalMessageInfo

func (m *Son) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Mother)(nil), "ratatouille.Mother")
	proto.RegisterType((*Son)(nil), "ratatouille.Son")
}

func init() { proto.RegisterFile("services.proto", fileDescriptor_8e16ccb8c5307b32) }

var fileDescriptor_8e16ccb8c5307b32 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2e, 0x4a, 0x2c, 0x49,
	0x2c, 0xc9, 0x2f, 0xcd, 0xcc, 0xc9, 0x49, 0x95, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5,
	0x07, 0x4b, 0x25, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x2a, 0x49, 0x71,
	0xb1, 0xf9, 0xe6, 0x97, 0x64, 0xa4, 0x16, 0x09, 0x09, 0x70, 0x31, 0xe7, 0x16, 0xa7, 0x4b, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x4a, 0xe2, 0x5c, 0xcc, 0xc1, 0xf9, 0x79, 0x98, 0x12,
	0x46, 0x65, 0x5c, 0x1c, 0x2e, 0xf9, 0x50, 0x6d, 0x86, 0x5c, 0x4c, 0x2e, 0xf9, 0x42, 0x62, 0x7a,
	0x10, 0x4b, 0xf4, 0x60, 0x96, 0xe8, 0xb9, 0x82, 0x2c, 0x91, 0x12, 0xd6, 0x43, 0x72, 0x89, 0x1e,
	0x54, 0x8b, 0x39, 0x92, 0x76, 0x52, 0x34, 0x1a, 0xa5, 0x73, 0xb1, 0xba, 0xe4, 0x83, 0x9c, 0xa4,
	0x0d, 0xb6, 0x14, 0x9b, 0x1a, 0x29, 0x01, 0x14, 0x41, 0x90, 0x62, 0x43, 0x98, 0x2e, 0x5c, 0x76,
	0x61, 0x68, 0x71, 0xe2, 0x8f, 0xe2, 0xd5, 0xb3, 0x46, 0x12, 0x4c, 0x62, 0x03, 0x6b, 0x31, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x94, 0x6c, 0x83, 0xf1, 0x69, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoMotherClient is the client API for DoMother service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoMotherClient interface {
	Do(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Mother, error)
	DoMother(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Mother, error)
}

type doMotherClient struct {
	cc *grpc.ClientConn
}

func NewDoMotherClient(cc *grpc.ClientConn) DoMotherClient {
	return &doMotherClient{cc}
}

func (c *doMotherClient) Do(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Mother, error) {
	out := new(Mother)
	err := c.cc.Invoke(ctx, "/ratatouille.DoMother/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doMotherClient) DoMother(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Mother, error) {
	out := new(Mother)
	err := c.cc.Invoke(ctx, "/ratatouille.DoMother/DoMother", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoMotherServer is the server API for DoMother service.
type DoMotherServer interface {
	Do(context.Context, *empty.Empty) (*Mother, error)
	DoMother(context.Context, *empty.Empty) (*Mother, error)
}

// UnimplementedDoMotherServer can be embedded to have forward compatible implementations.
type UnimplementedDoMotherServer struct {
}

func (*UnimplementedDoMotherServer) Do(ctx context.Context, req *empty.Empty) (*Mother, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (*UnimplementedDoMotherServer) DoMother(ctx context.Context, req *empty.Empty) (*Mother, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMother not implemented")
}

func RegisterDoMotherServer(s *grpc.Server, srv DoMotherServer) {
	s.RegisterService(&_DoMother_serviceDesc, srv)
}

func _DoMother_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoMotherServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratatouille.DoMother/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoMotherServer).Do(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoMother_DoMother_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoMotherServer).DoMother(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratatouille.DoMother/DoMother",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoMotherServer).DoMother(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoMother_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ratatouille.DoMother",
	HandlerType: (*DoMotherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _DoMother_Do_Handler,
		},
		{
			MethodName: "DoMother",
			Handler:    _DoMother_DoMother_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// DoSonClient is the client API for DoSon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoSonClient interface {
	Do(ctx context.Context, in *Mother, opts ...grpc.CallOption) (*Son, error)
	DoSon(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Son, error)
}

type doSonClient struct {
	cc *grpc.ClientConn
}

func NewDoSonClient(cc *grpc.ClientConn) DoSonClient {
	return &doSonClient{cc}
}

func (c *doSonClient) Do(ctx context.Context, in *Mother, opts ...grpc.CallOption) (*Son, error) {
	out := new(Son)
	err := c.cc.Invoke(ctx, "/ratatouille.DoSon/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doSonClient) DoSon(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Son, error) {
	out := new(Son)
	err := c.cc.Invoke(ctx, "/ratatouille.DoSon/DoSon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoSonServer is the server API for DoSon service.
type DoSonServer interface {
	Do(context.Context, *Mother) (*Son, error)
	DoSon(context.Context, *empty.Empty) (*Son, error)
}

// UnimplementedDoSonServer can be embedded to have forward compatible implementations.
type UnimplementedDoSonServer struct {
}

func (*UnimplementedDoSonServer) Do(ctx context.Context, req *Mother) (*Son, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (*UnimplementedDoSonServer) DoSon(ctx context.Context, req *empty.Empty) (*Son, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSon not implemented")
}

func RegisterDoSonServer(s *grpc.Server, srv DoSonServer) {
	s.RegisterService(&_DoSon_serviceDesc, srv)
}

func _DoSon_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mother)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoSonServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratatouille.DoSon/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoSonServer).Do(ctx, req.(*Mother))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoSon_DoSon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoSonServer).DoSon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratatouille.DoSon/DoSon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoSonServer).DoSon(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoSon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ratatouille.DoSon",
	HandlerType: (*DoSonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _DoSon_Do_Handler,
		},
		{
			MethodName: "DoSon",
			Handler:    _DoSon_DoSon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
