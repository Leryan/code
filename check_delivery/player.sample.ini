; this is a free section
[methods]
send = file:///tmp/bla
recv = file:///tmp/bla

ftp = ftp://localhost:21/inside/bla?ssl_verify=NONE
ftp2 = ftp://localhost:21/inside/bla2?ssl_verify=NONE
ftps = ftps://localhost:21/inside/bla?ssl_verify=NONE
ftps2 = ftps://localhost:21/inside/bla2?ssl_verify=NONE

smtp = smtpstarttls://user%40peterschmitt.fr:exists@peterschmitt.fr:587
imap = imapstarttls://user%40peterschmitt.fr:exists@peterschmitt.fr:143
imap2 = imapstarttls://user%40peterschmitt.fr:exists@peterschmitt.fr:143/Bleurg

; this section is mandatory with --play option
[scenarios]

smtp1.send = ${methods:smtp}
smtp1.recv = ${methods:imap}

smtp2.send = ${methods:smtp}
smtp2.recv = ${methods:imap2}

ftp1.send = ${methods:ftp}
ftp1.recv = ${methods:ftp}

ftp2.send = ${methods:ftps}
ftp2.recv = ${methods:ftps}

ftp3.send = ${methods:ftp}
ftp3.recv = ${methods:ftp2}

ftp4.send = ${methods:ftps}
ftp4.recv = ${methods:ftps2}

; check, OK status -> OK
in_out.send = ${methods:send}
in_out.recv = ${methods:recv}

; check, OK status -> CRITICAL
in_out1.send = ${methods:send}
in_out1.recv = ${methods:recv}

; check, CRITICAL status -> OK
in_out2.send = ${methods:send}1
in_out2.recv = ${methods:recv}

; no check, OK status
in_out3.send = ${methods:send}
in_out3.recv = ${methods:recv}

; no check, CRITICAL status
in_out4.send = ${methods:send}1
in_out4.recv = ${methods:recv}

; this section is mandatory with --play option
[expects]
; /tmp/bla -> /tmp/bla is OK, this check is useless, just for example.
in_out.status.eq = 0
in_out.message.regexp = .*found.*

; /tmp/bla -> /tmp/bla is OK, but we don't want to be OK. This returns a CRITICAL state.
in_out1.status.neq = 0

; /tmp/bla1 -> /tmp/bla is impossible, force this case to return OK state.
; this might be useful to test a case where you don't want something to happen.
in_out2.status.eq = 2
